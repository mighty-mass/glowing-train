// Generated by Xata Codegen 0.30.1. Please do not edit.
import { buildClient } from "npm:@xata.io/client@latest";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "npm:@xata.io/client@latest";

const tables = [
  {
    name: "account",
    checkConstraints: {
      account_xata_id_length_xata_id: {
        name: "account_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_account_xata_id_key: {
        name: "_pgroll_new_account_xata_id_key",
        columns: ["xata_id"],
      },
      account__pgroll_new_username_key: {
        name: "account__pgroll_new_username_key",
        columns: ["username"],
      },
    },
    columns: [
      {
        name: "password",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "username",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "stock",
    checkConstraints: {
      stock_xata_id_length_xata_id: {
        name: "stock_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {
      transaction_id_link: {
        name: "transaction_id_link",
        columns: ["transaction_id"],
        referencedTable: "transaction",
        referencedColumns: ["xata_id"],
        onDelete: "CASCADE",
      },
      wallet_id_link: {
        name: "wallet_id_link",
        columns: ["wallet_id"],
        referencedTable: "wallet",
        referencedColumns: ["xata_id"],
        onDelete: "CASCADE",
      },
    },
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_stock_xata_id_key: {
        name: "_pgroll_new_stock_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "transaction_id",
        type: "link",
        link: { table: "transaction" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"transaction"}',
      },
      {
        name: "wallet_id",
        type: "link",
        link: { table: "wallet" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"wallet"}',
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "ticker",
    checkConstraints: {
      ticker_xata_id_length_xata_id: {
        name: "ticker_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {
      transaction_id_link: {
        name: "transaction_id_link",
        columns: ["transaction_id"],
        referencedTable: "transaction",
        referencedColumns: ["xata_id"],
        onDelete: "CASCADE",
      },
      wallet_id_link: {
        name: "wallet_id_link",
        columns: ["wallet_id"],
        referencedTable: "wallet",
        referencedColumns: ["xata_id"],
        onDelete: "CASCADE",
      },
    },
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_ticker_xata_id_key: {
        name: "_pgroll_new_ticker_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "transaction_id",
        type: "link",
        link: { table: "transaction" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"transaction"}',
      },
      {
        name: "wallet_id",
        type: "link",
        link: { table: "wallet" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"wallet"}',
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "transaction",
    checkConstraints: {
      transactions_xata_id_length_xata_id: {
        name: "transactions_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {
      wallet_id_link: {
        name: "wallet_id_link",
        columns: ["wallet_id"],
        referencedTable: "wallet",
        referencedColumns: ["xata_id"],
        onDelete: "CASCADE",
      },
    },
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_transactions_xata_id_key: {
        name: "_pgroll_new_transactions_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "amount",
        type: "float",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "currency",
        type: "multiple",
        notNull: false,
        unique: false,
        defaultValue: "'{EUR,SEK,USD}'::text[]",
        comment: "",
      },
      {
        name: "description",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "wallet_id",
        type: "link",
        link: { table: "wallet" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"wallet"}',
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "wallet",
    checkConstraints: {
      expenses_xata_id_length_xata_id: {
        name: "expenses_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {
      account_id_link: {
        name: "account_id_link",
        columns: ["account_id"],
        referencedTable: "account",
        referencedColumns: ["xata_id"],
        onDelete: "CASCADE",
      },
    },
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_expenses_xata_id_key: {
        name: "_pgroll_new_expenses_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "account_id",
        type: "link",
        link: { table: "account" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"account"}',
      },
      {
        name: "description",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "name",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "type",
        type: "multiple",
        notNull: true,
        unique: false,
        defaultValue: "'{TradFi,Bank,Crypto}'::text[]",
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Account = InferredTypes["account"];
export type AccountRecord = Account & XataRecord;

export type Stock = InferredTypes["stock"];
export type StockRecord = Stock & XataRecord;

export type Ticker = InferredTypes["ticker"];
export type TickerRecord = Ticker & XataRecord;

export type Transaction = InferredTypes["transaction"];
export type TransactionRecord = Transaction & XataRecord;

export type Wallet = InferredTypes["wallet"];
export type WalletRecord = Wallet & XataRecord;

export type DatabaseSchema = {
  account: AccountRecord;
  stock: StockRecord;
  ticker: TickerRecord;
  transaction: TransactionRecord;
  wallet: WalletRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: Deno.env.get("XATA_DATABASE_URL"),
  apiKey: XDeno.env.get("XATA_API_KEY") 
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
